{"ast":null,"code":"import api from './api';\nclass UserService {\n  // User registration\n  async registerUser(userData) {\n    const response = await api.post('/user/register', userData);\n    return response.data;\n  }\n\n  // User login\n  async loginUser(credentials) {\n    const response = await api.post('/user/login', credentials);\n    return response.data;\n  }\n\n  // Get user by ID\n  async getUserById(userId) {\n    const response = await api.get(`/user/${userId}`);\n    return response.data;\n  }\n\n  // Update user\n  async updateUser(userId, userData) {\n    const response = await api.put(`/user/${userId}`, userData);\n    return response.data;\n  }\n\n  // Get active polls\n  async getActivePolls() {\n    const response = await api.get('/user/polls/active');\n    return response.data;\n  }\n\n  // Get poll by ID\n  async getPollById(pollId) {\n    const response = await api.get(`/user/polls/${pollId}`);\n    return response.data;\n  }\n\n  // Get poll options\n  async getPollOptions(pollId) {\n    const response = await api.get(`/user/polls/${pollId}/options`);\n    return response.data;\n  }\n\n  // Submit vote\n  async submitVote(userId, pollId, optionId) {\n    const response = await api.post(`/user/${userId}/polls/${pollId}/vote`, {\n      optionId: optionId\n    });\n    return response.data;\n  }\n\n  // Check if user has voted\n  async hasUserVoted(userId, pollId) {\n    const response = await api.get(`/user/${userId}/polls/${pollId}/voted`);\n    return response.data;\n  }\n\n  // Get poll results\n  async getPollResults(pollId) {\n    const response = await api.get(`/user/polls/${pollId}/results`);\n    return response.data;\n  }\n\n  // Get polls user has voted in\n  async getUserVotedPolls(userId) {\n    const response = await api.get(`/user/${userId}/voted-polls`);\n    return response.data;\n  }\n}\nconst userService = new UserService();\nexport default userService;","map":{"version":3,"names":["api","UserService","registerUser","userData","response","post","data","loginUser","credentials","getUserById","userId","get","updateUser","put","getActivePolls","getPollById","pollId","getPollOptions","submitVote","optionId","hasUserVoted","getPollResults","getUserVotedPolls","userService"],"sources":["/Users/yatishbansal/Desktop/apc project/online-polling-system/frontend/src/services/userService.js"],"sourcesContent":["import api from './api';\n\nclass UserService {\n  // User registration\n  async registerUser(userData) {\n    const response = await api.post('/user/register', userData);\n    return response.data;\n  }\n\n  // User login\n  async loginUser(credentials) {\n    const response = await api.post('/user/login', credentials);\n    return response.data;\n  }\n\n  // Get user by ID\n  async getUserById(userId) {\n    const response = await api.get(`/user/${userId}`);\n    return response.data;\n  }\n\n  // Update user\n  async updateUser(userId, userData) {\n    const response = await api.put(`/user/${userId}`, userData);\n    return response.data;\n  }\n\n  // Get active polls\n  async getActivePolls() {\n    const response = await api.get('/user/polls/active');\n    return response.data;\n  }\n\n  // Get poll by ID\n  async getPollById(pollId) {\n    const response = await api.get(`/user/polls/${pollId}`);\n    return response.data;\n  }\n\n  // Get poll options\n  async getPollOptions(pollId) {\n    const response = await api.get(`/user/polls/${pollId}/options`);\n    return response.data;\n  }\n\n  // Submit vote\n  async submitVote(userId, pollId, optionId) {\n    const response = await api.post(`/user/${userId}/polls/${pollId}/vote`, {\n      optionId: optionId\n    });\n    return response.data;\n  }\n\n  // Check if user has voted\n  async hasUserVoted(userId, pollId) {\n    const response = await api.get(`/user/${userId}/polls/${pollId}/voted`);\n    return response.data;\n  }\n\n  // Get poll results\n  async getPollResults(pollId) {\n    const response = await api.get(`/user/polls/${pollId}/results`);\n    return response.data;\n  }\n\n  // Get polls user has voted in\n  async getUserVotedPolls(userId) {\n    const response = await api.get(`/user/${userId}/voted-polls`);\n    return response.data;\n  }\n}\n\nconst userService = new UserService();\nexport default userService;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,WAAW,CAAC;EAChB;EACA,MAAMC,YAAYA,CAACC,QAAQ,EAAE;IAC3B,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;IAC3D,OAAOC,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMC,SAASA,CAACC,WAAW,EAAE;IAC3B,MAAMJ,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,aAAa,EAAEG,WAAW,CAAC;IAC3D,OAAOJ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMG,WAAWA,CAACC,MAAM,EAAE;IACxB,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACW,GAAG,CAAC,SAASD,MAAM,EAAE,CAAC;IACjD,OAAON,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMM,UAAUA,CAACF,MAAM,EAAEP,QAAQ,EAAE;IACjC,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACa,GAAG,CAAC,SAASH,MAAM,EAAE,EAAEP,QAAQ,CAAC;IAC3D,OAAOC,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMQ,cAAcA,CAAA,EAAG;IACrB,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACW,GAAG,CAAC,oBAAoB,CAAC;IACpD,OAAOP,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMS,WAAWA,CAACC,MAAM,EAAE;IACxB,MAAMZ,QAAQ,GAAG,MAAMJ,GAAG,CAACW,GAAG,CAAC,eAAeK,MAAM,EAAE,CAAC;IACvD,OAAOZ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMW,cAAcA,CAACD,MAAM,EAAE;IAC3B,MAAMZ,QAAQ,GAAG,MAAMJ,GAAG,CAACW,GAAG,CAAC,eAAeK,MAAM,UAAU,CAAC;IAC/D,OAAOZ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMY,UAAUA,CAACR,MAAM,EAAEM,MAAM,EAAEG,QAAQ,EAAE;IACzC,MAAMf,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,SAASK,MAAM,UAAUM,MAAM,OAAO,EAAE;MACtEG,QAAQ,EAAEA;IACZ,CAAC,CAAC;IACF,OAAOf,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMc,YAAYA,CAACV,MAAM,EAAEM,MAAM,EAAE;IACjC,MAAMZ,QAAQ,GAAG,MAAMJ,GAAG,CAACW,GAAG,CAAC,SAASD,MAAM,UAAUM,MAAM,QAAQ,CAAC;IACvE,OAAOZ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMe,cAAcA,CAACL,MAAM,EAAE;IAC3B,MAAMZ,QAAQ,GAAG,MAAMJ,GAAG,CAACW,GAAG,CAAC,eAAeK,MAAM,UAAU,CAAC;IAC/D,OAAOZ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMgB,iBAAiBA,CAACZ,MAAM,EAAE;IAC9B,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACW,GAAG,CAAC,SAASD,MAAM,cAAc,CAAC;IAC7D,OAAON,QAAQ,CAACE,IAAI;EACtB;AACF;AAEA,MAAMiB,WAAW,GAAG,IAAItB,WAAW,CAAC,CAAC;AACrC,eAAesB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}